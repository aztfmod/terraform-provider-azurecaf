name: Go

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  repository_dispatch:

# Restrict permissions for all jobs by default
permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      id-token: write  # Required for keyless signing
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: './go.mod'

      - name: Install linters
        run: |
          go install github.com/bflad/tfproviderlint/cmd/tfproviderlint@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: golangci-lint run ./...

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.12.0"

      - name: Build
        run: go build -v ./...

      - name: Resource Definition Validation
        run: make test_resource_definitions
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Resource Matrix Testing
        run: make test_resource_matrix
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Resource Coverage Analysis
        run: make test_resource_coverage
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Unit Tests
        run: make unittest
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Test Coverage
        run: make test_coverage
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Test Coverage HTML
        run: make test_coverage_html
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Test Integration
        run: make test_integration
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Test Data Sources
        run: make test_data_sources
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Test Error Handling
        run: make test_error_handling
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Test Resource Naming
        run: make test_resource_naming
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Comprehensive CI Tests
        run: make test_ci
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: E2E Tests (Quick)
        run: make test_e2e_quick
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: E2E Tests (Full) - Pull Requests Only
        if: github.event_name == 'pull_request'
        run: make test_e2e
        env:
          CHECKPOINT_DISABLE: 1
          TF_IN_AUTOMATION: 1
          TF_CLI_ARGS_init: "-upgrade=false"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        if: startsWith(github.ref, 'refs/tags/')
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
